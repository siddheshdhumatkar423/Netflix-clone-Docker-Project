name: CI/CD Netflix Clone

on:
  push:
    branches:
      - main

env:
  SONAR_HOST_URL: "http://${
    secrets.SONAR_HOST_URL
  }" # replace with your SonarQube host or set as secret

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
    - name: 🔍 Checkout code
      uses: actions/checkout@v4

    - name: 🛠 Setup Java 17
      uses: actions/setup-java@v4
      with:
        distribution: temurin
        java-version: '17'

    - name: ⚙️ Setup Node.js 16
      uses: actions/setup-node@v4
      with:
        node-version: '16'

    - name: 🚀 Run SonarQube scan
      uses: sonarsource/sonarqube-scan-action@v1.1.0
      with:
        projectBaseDir: '.'
      env:
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        SONAR_HOST_URL: ${{ env.SONAR_HOST_URL }}

    - name: 📦 Install npm dependencies
      run: npm install

    - name: 📊 OWASP Dependency Check
      run: |
        wget https://github.com/jeremylong/DependencyCheck/releases/download/v8.4.0/dependency-check-8.4.0-release.zip
        unzip dependency-check-8.4.0-release.zip
        ./dependency-check/bin/dependency-check.sh --scan . --format XML
    - name: 🔐 Filesystem scan using Trivy
      run: |
        curl -sfL https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/install.sh | sh
        ./trivy fs . > trivyfs.txt
    - name: 🐳 Docker Login
      run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

    - name: 🏗️ Build and Push Docker image
      shell: bash
      run: |
        docker build --build-arg TMDB_V3_API_KEY="${{ secrets.TMDB_API_KEY }}" -t "${{ secrets.DOCKER_USERNAME }}/netflix:latest" .
        docker push "${{ secrets.DOCKER_USERNAME }}/netflix:latest"
    - name: 🔍 Image scan using Trivy
      run: ./trivy image "${{ secrets.DOCKER_USERNAME }}/netflix:latest" > trivyimage.txt

    - name: 🚢 Run Docker container for smoke-testing
      run: |
        docker rm -f netflix || true
        docker run -d --name netflix -p 8081:80 "${{ secrets.DOCKER_USERNAME }}/netflix:latest"
        # Optional health-check command here
    - name: ⚓ Deploy to Kubernetes
      env:
        KUBECONFIG: ${{ secrets.KUBECONFIG }}
      run: |
        mkdir -p ~/.kube
        echo "$KUBECONFIG" > ~/.kube/config
        chmod 600 ~/.kube/config
        kubectl apply -f Kubernetes/deployment.yml
        kubectl apply -f Kubernetes/service.yml
        kubectl rollout status deployment/netflix
    - name: 📧 Send email notification
      if: always()
      uses: dawidd6/action-send-mail@v4
      with:
        server_address: smtp.gmail.com
        server_port: 465
        username: ${{ secrets.EMAIL_USERNAME }}
        password: ${{ secrets.EMAIL_PASSWORD }}
        subject: Netflix Clone Build – ${{ job.status }}
        body: |
          Project: ${{ github.repository }}
          Branch: ${{ github.ref_name }}
          Commit: ${{ github.sha }}
          Status: ${{ job.status }}
          View logs: ${{ github.run_url }}
        to: siddheshdhumatkar591@gmail.com
        from: GitHub Actions <no-reply@example.com>
